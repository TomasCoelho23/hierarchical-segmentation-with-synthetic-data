
import os
import os.path as osp
import glob
import torch
import pytorch_lightning as pl

from torch.utils.data import DataLoader
from dataset import PhenoBenchDataset
from cldm.logger import ImageLogger
from pytorch_lightning.callbacks import ModelCheckpoint
from cldm.model import create_model, load_state_dict
from share import *

torch.cuda.empty_cache()
# Configs
resume_path = '../ControlNet/models/control_seg.ckpt' #this is the ckpt generated by tool_add_control.py

model_conf_path = '../GenVal-main/ControlNet/models/cldm_v15_small.yaml' #path to ymal file
batch_size = 1 #1
logger_freq = 15000 #20
learning_rate = 1e-5
sd_locked = True
only_mid_control = False

# Handling several GPUs
no_devices = torch.cuda.device_count()
gpus = list(range(no_devices))

# Logs dir
logs_dir = None #create a path for a logs directory
if not osp.exists(logs_dir):
    os.mkdir(logs_dir)
num_dir = max([int(el) for el in os.listdir(logs_dir) if el.isdigit()], default=-1)
logs_dir = f'{logs_dir}/{num_dir+1}'

# First use cpu to load models. Pytorch Lightning will automatically move it to GPUs.
model = create_model(model_conf_path).cpu()
model.load_state_dict(load_state_dict(resume_path, location='cpu'))
model.learning_rate = learning_rate
model.sd_locked = sd_locked
model.only_mid_control = only_mid_control

# Misc
dataset = PhenoBenchDataset(
    root="../PhenoBench", #path to the original Phenobench 
    split="train",
    prompt_json="../GenVal-main/captions/captions_phenobench.json" #caption file generated by running the clipper on the original dataset
)
dataloader = DataLoader(dataset, batch_size=batch_size, shuffle=True, num_workers=1, pin_memory=False,persistent_workers=False )
logger = ImageLogger(batch_frequency=logger_freq) #this is only saving the first and last epoch images
latest_checkpoint = ModelCheckpoint(filename='latest-{epoch}-{step}', every_n_epochs=5, save_top_k=-1)
trainer = pl.Trainer(accelerator = 'gpu',
                     precision=32,
                     devices=gpus,
                     strategy='ddp',
                     callbacks=[logger, latest_checkpoint],
                     accumulate_grad_batches=1,
                     default_root_dir=logs_dir,
                     max_epochs=1)


# Train!
trainer.fit(model, dataloader)
